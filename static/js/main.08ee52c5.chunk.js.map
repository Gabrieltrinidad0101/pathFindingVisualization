{"version":3,"sources":["components/help/isFirstOrSecond.js","components/Node/Node.js","context/context.js","components/help/createNode.js","components/help/getInicialGrid.js","components/help/updateGridWalls.js","algorithms/dijkstra.js","components/help/animationIsPath.js","algorithms/aStar.js","components/visualization/Visualization.js","components/containerVisualizations/ContainerVisualizations.jsx","mazeAlgorithms/recursiveDivision.js","components/help/clearPath.js","components/help/animation.js","components/help/mazeAnimation.js","components/Setting/Config.js","components/header/Header.js","App.js","index.js"],"names":["isFirstOrSecond","value","Node","isStart","isFinish","row","col","onMouseDown","onMouseEnter","onMouseUp","isWall","firstOrSecond","typeNode","className","id","_","draggable","AppContext","React","createContext","AppProvider","children","useState","gridOne","setGridOne","gridTwo","setGridTwo","toggleWalls","isPath","isVisualizationTwo","config","setConfig","Provider","useGlobalContext","useContext","createNode","STARTNODE","ENDNODE","node","totalDistance","Infinity","distance","previoNode","isVisited","getInicialGrid","rows","cols","grid","currentRow","push","updateGridWalls","updateWalls","newGrid","forEach","indexRow","indexCol","nodeHtml","document","getElementById","style","background","classList","remove","setAttribute","index","Dijkstran","getNodes","unvisitedNodes","startNode","endNode","visitedNodes","shortestWay","length","sort","currentNode","shift","setDistance","NodeA","NodeB","getNeighbors","neighbor","neighbors","filter","current","way","unshift","createPathAnimation","ele","backgroundColor","animationIsPath","manhattenDistance","finishNode","Math","abs","getStartAndEndNode","aStart","visitedNodesInOrder","a","b","includes","Visualization","visualizationRef","useRef","cssGrid","setCssGrid","gridStartNode","setGridStartNode","gridEndNode","setGridEndNode","gridOneLocal","setGridOneLocal","gridTwoLocal","setGridTwoLocal","pressed","mouseIs","setMouseIs","useEffect","width","clientWidth","height","clientHeight","ROWS","floor","COLS","getRowsAndCols","gridTemplateRows","gridTemplateColumns","StartOrEndNode","wallToggle","addWallToggleVisualizationTwo","changeStartNode","newGridTwo","slice","newNode","GRID","reRenderPath","ref","map","ContainerVisualizations","walls","clearPath","querySelectorAll","firstOrTwo","Promise","res","setTimeout","console","log","add","animation","range","len","result","i","getRecursiveWalls","vertical","horizontal","dir","RandomNumer","addWall","indexOf","tempWalls","temp","splice","max","randomNum","random","generateRandomNumber","wall","array","recursiveDivision","mazeAnimation","ele1","Config","cap","querySelector","startAlgorithmo","newGridOne","pathOne","pathTwo","visitedNodesOne","shortestWayOne","visitedNodesTwo","shortestWayTwo","all","animtion","clear","clearAll","updateGridOne","updateGridTwo","mazeRecursiveDivision","maze1","maze2","newGrid1","newGrid2","onClick","Header","toggle","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.08ee52c5.chunk.js","sourcesContent":["const isFirstOrSecond = value => value ? \"1\": \"2\";\nexport default isFirstOrSecond","import React from 'react'\nimport \"./Node.css\"\nimport isFirstOrSecond from '../help/isFirstOrSecond';\nexport default function Node({isStart, isFinish, row,col,onMouseDown,\n                              onMouseEnter,onMouseUp,isWall,firstOrSecond}) {\n    const typeNode = isStart \n                           ? \"start-node\" : \n                           isFinish ? \n                           \"end-node\" : \n                           isWall ?\n                           \"is-wall\" : \"\" ; \n    \n    const className = isFirstOrSecond(firstOrSecond)\n    return (\n        <div className={`node ${typeNode}`}\n             id={`node-${className}-${row}-${col}`}\n             onMouseDown={_=>onMouseDown(row,col,typeNode)}\n             onMouseEnter={_=>onMouseEnter(row,col)}\n             onMouseUp={_=>onMouseUp()}\n             draggable=\"false\"\n             >\n        </div>\n    )\n}\n","import React, { useState, useContext } from \"react\";\n\nconst AppContext = React.createContext()\n\n\nexport const AppProvider = ({ children }) => {\n    const [gridOne, setGridOne] = useState([]);\n    const [gridTwo, setGridTwo] = useState([]);\n\n    const [config,setConfig] = useState({\n      toggleWalls: true,\n      isPath: false,\n      isVisualizationTwo: false\n    })\n  return <AppContext.Provider value={{gridOne, setGridOne,\n                                      gridTwo, setGridTwo,\n                                      config,setConfig\n                                      }}>{children}</AppContext.Provider>\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}","const createNode = (row,col,STARTNODE={},ENDNODE={},isWall=false)=>{\n    const node = {\n        row,\n        col,\n        isStart: row === STARTNODE.row && col === STARTNODE.col,\n        isFinish: row === ENDNODE.row && col === ENDNODE.col,\n        isWall,\n        totalDistance: Infinity,\n        distance: Infinity,\n        previoNode: null,\n        isVisited: false,\n    }\n    return node;\n}\n\n\nexport default createNode","import createNode from \"./createNode\";\nconst getInicialGrid = (rows,cols,STARTNODE,ENDNODE)=>{\n    const grid = [];\n    for(let row = 0; row < rows; row++){\n        let currentRow = []\n        for(let col = 0; col < cols; col++){\n            currentRow.push(createNode(row,col,STARTNODE,ENDNODE))\n        }\n        grid.push(currentRow)\n    }\n    return grid\n}\n\nexport default getInicialGrid","import createNode from \"./createNode\";\nimport isFirstOrSecond from \"./isFirstOrSecond\";\nconst updateGridWalls = (grid,firstOrSecond,updateWalls,STARTNODE,ENDNODE)=>{\n    const newGrid = [];\n    const className = isFirstOrSecond(firstOrSecond)\n    grid.forEach((row,indexRow)=>{\n        const currentRow = []\n        row.forEach((node,indexCol)=>{\n            const nodeHtml = document.getElementById(`node-${className}-${indexRow}-${indexCol}`)\n            nodeHtml.style.background = \"\"\n            nodeHtml.classList.remove(\"visited-node\")\n            nodeHtml.classList.remove(\"path-node\")\n            nodeHtml.setAttribute(\"clear\",\"false\")\n            if(!STARTNODE && node.isStart){\n                STARTNODE = node\n            }\n\n            if(!ENDNODE && node.isFinish){\n                ENDNODE = node\n            }\n\n            if(updateWalls){\n                node.isWall = false\n            }\n\n            currentRow.push(createNode(indexRow,indexCol,STARTNODE,ENDNODE,node.isWall,node.index))\n        })\n        newGrid.push(currentRow)\n    })\n    return newGrid\n}\n\nexport default updateGridWalls","export const Dijkstran = (grid)=>{\n    const {unvisitedNodes,startNode,endNode} = getNodes(grid)\n    const visitedNodes = [];\n    if(!startNode) return {visitedNodes,shortestWay: []}\n    startNode.distance = 0;\n    while(unvisitedNodes.length){\n        sort(unvisitedNodes)\n        const currentNode = unvisitedNodes.shift()\n        if(currentNode.isWall && !currentNode.isFinish && !currentNode.isStart) continue\n        if(currentNode.distance === Infinity) break\n        visitedNodes.push(currentNode)\n        currentNode.isVisited = true\n        if(currentNode === endNode) break\n        setDistance(grid,currentNode)\n    }\n    const dataPath = {\n        visitedNodes,\n        shortestWay: shortestWay(endNode)\n    }\n    return dataPath\n}\n\nconst sort = unvisitedNodes=>{\n    unvisitedNodes.sort((NodeA,NodeB)=>NodeA.distance - NodeB.distance )\n}\n\nconst setDistance = (grid,currentNode)=>{\n    const unvisitedNodes = getNeighbors(grid,currentNode)\n    for(const neighbor of unvisitedNodes){\n        neighbor.distance = currentNode.distance + 1\n        neighbor.previoNode = currentNode\n    }\n}\n\n\nconst getNeighbors = (grid,currentNode)=>{\n    let neighbors = []\n    const {row,col} = currentNode;\n    if(row > 0) neighbors.push(grid[row - 1][col])\n    if(row < grid.length - 1)neighbors.push(grid[row + 1][col])\n    if(col > 0) neighbors.push(grid[row][col - 1])\n    if(col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\n    return neighbors.filter(neighbor => !neighbor.isVisited)\n}\n\nconst getNodes = grid=>{\n    let unvisitedNodes = []\n    let startNode = null\n    let endNode = null\n    for(const row of grid){\n        for(const node of row){\n            if(!startNode)\n                startNode = node.isStart === true ? node : null\n            if(!endNode)\n                endNode = node.isFinish === true ? node : null\n            unvisitedNodes.push(node)\n            }\n        }\n    return {unvisitedNodes,startNode,endNode}\n}\n\nexport const shortestWay =endNode=>{\n    let current = endNode\n    const way = []\n    while(current !== null){\n        way.unshift(current)\n        current = current.previoNode\n    }\n    return way\n}\n\n","const animationIsPath = (visitedNodes,shortestWay,className)=>{\n    if(!visitedNodes) return\n    visitedNodes.forEach((node,index)=>{\n        if(index === visitedNodes.length -1){\n            createPathAnimation(shortestWay,className)\n        }\n        const ele = document.getElementById(`node-${className}-${node.row}-${node.col}`)\n        ele.style.backgroundColor = \"#275683\"\n        ele.setAttribute(\"clear\",\"true\")\n    })\n}\n\nexport const createPathAnimation = (shortestWay,className) =>{\n    shortestWay.forEach((node)=>{\n        const ele = document.getElementById(`node-${className}-${node.row}-${node.col}`)\n        ele.style.backgroundColor = \"#48a3fd\"\n        ele.setAttribute(\"clear\",\"true\")\n    })\n}\n\nexport default animationIsPath","const aStart = (grid)=>{\n    let unvisitedNodes = [];\n    let visitedNodesInOrder = [];\n    const {startNode,finishNode} = getStartAndEndNode(grid)\n    if(!startNode || !finishNode) return {\n        visitedNodes: [],\n        shortestWay: []\n    }\n    startNode.distance = 0;\n    unvisitedNodes.push(startNode)\n\n    while(unvisitedNodes.length > 0){\n        unvisitedNodes.sort((a,b)=>a.totalDistance - b.totalDistance)\n        let currentNode = unvisitedNodes.shift()\n        if(currentNode.isWall && !currentNode.isFinish && !currentNode.isStart) continue\n        visitedNodesInOrder.push(currentNode)\n        if(currentNode === finishNode)break\n        currentNode.isVisited = true\n        let neighbors = getNeighbors(grid,currentNode)\n        for(let neighbor of neighbors){\n            let distance = currentNode.distance + 1\n            if(!unvisitedNodes.includes(neighbor)){\n                unvisitedNodes.unshift(neighbor)\n                neighbor.distance = distance\n                neighbor.totalDistance = distance + manhattenDistance(neighbor,finishNode)\n                neighbor.previoNode = currentNode\n            }else if(distance < neighbor.distance){\n                neighbor.distance = distance\n                neighbor.totalDistance = distance + manhattenDistance(neighbor,finishNode)\n                neighbor.previoNode = currentNode\n            }\n        }\n    }\n    const dataPath={\n        visitedNodes: visitedNodesInOrder,\n        shortestWay: shortestWay(finishNode)\n    }\n    return dataPath\n}\n\n\nconst manhattenDistance = (node,finishNode)=>{\n    let x = Math.abs(node.row - finishNode.row)\n    let y = Math.abs(node.col - finishNode.col)\n    return x+y\n}\n\n\nconst getStartAndEndNode = grid=>{\n    let startNode;\n    let finishNode;\n    for(const row of grid){\n        for(const node of row){\n            const {isStart,isFinish} = node\n            if(isStart) startNode = node\n            if(isFinish) finishNode = node\n        }\n    }\n    return {startNode,finishNode}\n}\n\nconst getNeighbors = (grid,currentNode)=>{\n    let neighbors = []\n    const {row,col} = currentNode;\n    if(row > 0) neighbors.push(grid[row - 1][col])\n    if(row < grid.length - 1)neighbors.push(grid[row + 1][col])\n    if(col > 0) neighbors.push(grid[row][col - 1])  \n    if(col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\n    return neighbors.filter(neighbor => !neighbor.isVisited)\n    }\n\nexport const shortestWay =endNode=>{\n    let current = endNode\n    const way = []\n    while(current !== null){\n        way.unshift(current)\n        current = current.previoNode\n    }\n    return way\n}\n\nexport default aStart","import {useRef,useEffect, useState} from 'react'\nimport Node  from \"../Node/Node\"\nimport \"./Visualization.css\"\nimport {useGlobalContext} from \"../../context/context\"\nimport getInicialGrid from '../help/getInicialGrid'\nimport updateGridWalls from '../help/updateGridWalls'\nimport {Dijkstran} from \"../../algorithms/dijkstra\"\nimport animationIsPath from \"../help/animationIsPath\"\nimport isFirstOrSecond from '../help/isFirstOrSecond'\nimport aStart from '../../algorithms/aStar'\n\nconst getRowsAndCols = visualizationRef=>{\n    const width = visualizationRef.current.clientWidth\n    const height = visualizationRef.current.clientHeight\n    const ROWS = Math.floor(height / 25)\n    const COLS = Math.floor(width / 25)\n    const dimensions = {ROWS,COLS}    \n    return dimensions\n}\n\nconst createCssGrid = (rows,cols)=>({\n    gridTemplateRows: `repeat(${rows},25px)`,\n    gridTemplateColumns: `repeat(${cols},25px)`,\n    width: `${cols * 25}px`,\n    height: `${rows * 25}px`\n});\n\nexport default function Visualization({firstOrSecond,gridOne,setGridOne,gridTwo,setGridTwo}) {\n    //Hooks\n    const visualizationRef = useRef()\n    const [cssGrid, setCssGrid] = useState({})\n    const {config} = useGlobalContext()\n    const {toggleWalls,isPath,isVisualizationTwo} = config\n    const [gridStartNode,setGridStartNode] = useState({})\n    const [gridEndNode,setGridEndNode] = useState({})\n\n    const gridOneLocal = gridOne \n    const setGridOneLocal = setGridOne\n\n    const gridTwoLocal = gridTwo\n    const setGridTwoLocal = setGridTwo\n\n    const className = isFirstOrSecond(firstOrSecond)\n\n    const [mouseIs,setMouseIs] = useState({\n        startNode: false,\n        pressed: false\n    });\n\n    let STARTNODE\n    let ENDNODE\n\n    useEffect(_=>{\n        const {ROWS,COLS} = getRowsAndCols(visualizationRef)\n        STARTNODE = {row:Math.floor(ROWS/2),col:0}\n        ENDNODE = {row: Math.floor(ROWS/2),col: COLS - 1}\n        setGridStartNode(STARTNODE)\n        setGridEndNode(ENDNODE)\n        setCssGrid(createCssGrid(ROWS,COLS))\n        setGridOneLocal(getInicialGrid(ROWS,COLS,STARTNODE,ENDNODE))\n    },[])\n\n    const onMouseDown = (row,col,typeNode)=>{\n        setMouseIs({\n                StartOrEndNode: typeNode !== \"\" &&\n                                typeNode !== \"is-wall\" ? \n                                typeNode : false,\n                pressed: true\n            })\n        if(typeNode != \"start-node\" && typeNode != \"end-node\"){\n            const newGrid = wallToggle(gridOneLocal,row,col)\n            setGridOneLocal(newGrid)\n            addWallToggleVisualizationTwo(row,col)\n        }\n    }\n    const onMouseEnter = (row,col)=>{\n        if(!mouseIs.pressed) return \n        let newGrid = null;\n        if(mouseIs.StartOrEndNode){\n            newGrid = changeStartNode(gridOneLocal,row,col,mouseIs.StartOrEndNode);\n        }else{\n            newGrid = wallToggle(gridOneLocal,row,col);\n            addWallToggleVisualizationTwo(row,col)\n        }\n        setGridOneLocal(newGrid)\n    }\n\n    const onMouseUp= _=>{\n        setMouseIs({\n            startNode: false,\n            pressed: false\n        })\n    }\n\n    const addWallToggleVisualizationTwo = (row,col)=>{\n        if(isVisualizationTwo){\n            const newGridTwo = wallToggle(gridTwoLocal,row,col);\n            setGridTwoLocal(newGridTwo)\n        }\n    }\n\n    const wallToggle = (grid,row,col)=>{\n        const newGrid = grid.slice()\n        const node = newGrid[row][col];\n        if(node.isWall === toggleWalls) return newGrid;\n        const newNode = {...node,isWall: toggleWalls};\n        newGrid[row][col] = newNode;\n        return newGrid;\n    }\n\n    const changeStartNode = (grid,row,col,StartOrEndNode)=>{\n        if(StartOrEndNode == \"start-node\"){\n            STARTNODE = {row,col}\n            setGridStartNode(STARTNODE)\n            ENDNODE = gridEndNode\n        }else{\n            ENDNODE = {row,col}\n            setGridEndNode(ENDNODE)\n            STARTNODE = gridStartNode\n        }\n        const GRID = grid.slice()\n        const newGrid = updateGridWalls(GRID,firstOrSecond,false,STARTNODE,ENDNODE)\n        newGrid[row][col].isStart = StartOrEndNode == \"start-node\" ? true : false\n        reRenderPath(newGrid)\n        return newGrid\n    }\n    \n    const reRenderPath = newGrid=>{\n        if(isPath){\n            const {visitedNodes,shortestWay} = firstOrSecond ? Dijkstran(newGrid) : aStart(newGrid)\n            animationIsPath(visitedNodes,shortestWay,className)\n        }\n    }\n\n    return (\n        <>\n            <div className=\"visualization\" style={cssGrid} ref={visualizationRef} draggable=\"false\">\n                {\n                gridOneLocal.map((row,indexRow)=>\n                    row.map((node,indexCol)=>\n                        <Node isStart={node.isStart} \n                            isFinish={node.isFinish} \n                            col={indexCol}\n                            row={indexRow}\n                            onMouseDown={onMouseDown}\n                            onMouseEnter={onMouseEnter}\n                            onMouseUp={onMouseUp}\n                            isWall={node.isWall}\n                            index={node.index}  \n                            firstOrSecond={firstOrSecond}\n                            key={`${indexRow}-${indexCol}`\n                        }\n                        />\n                    )\n                ) \n                }\n            </div>\n        </>\n    )\n}","import React from 'react'\nimport Visualization from '../visualization/Visualization'\nimport \"./ContainerVisualizations.css\"\nimport { useGlobalContext } from '../../context/context'\nexport default function ContainerVisualizations() {\n    const {gridOne, setGridOne,gridTwo,setGridTwo} = useGlobalContext()\n\n    return (\n        <div className=\"ContainerVisualizations\">\n            <Visualization firstOrSecond={true} gridOne={gridOne} \n                                                setGridOne={setGridOne}\n                                                gridTwo={gridTwo}\n                                                setGridTwo={setGridTwo}/>\n             <Visualization firstOrSecond={false} gridOne={gridTwo} \n                                                  setGridOne={setGridTwo}\n                                                  gridTwo={gridOne}\n                                                  setGridTwo={setGridOne} />\n        </div>\n    )\n}","let walls;\nconst recursiveDivision = (grid)=>{\n    let vertical = range(grid[0].length)\n    let horizontal = range(grid.length)\n    walls = [];\n    getRecursiveWalls(vertical,horizontal)\n    return walls\n}\n\nconst range = len =>{\n    let result = []\n    for(let i = 0; i< len; i++)\n        result.push(i)\n     return result\n}\n\nconst getRecursiveWalls = (vertical,horizontal)=>{\n    if (vertical.length < 2 || horizontal.length < 2) {\n        return;\n    }\n    let dir;\n    let row;\n    if(vertical.length > horizontal.length){\n        dir = false;\n        row = RandomNumer(vertical)\n    }\n    if(vertical.length <= horizontal.length){\n        dir = true;\n        row = RandomNumer(horizontal)\n    }\n    if(dir){\n        addWall(dir,row,vertical,horizontal)\n        getRecursiveWalls(\n          vertical,\n          horizontal.slice(0, horizontal.indexOf(row)),\n          );\n        getRecursiveWalls(\n          vertical,\n          horizontal.slice(horizontal.indexOf(row) + 1),\n        );\n    }else{\n        addWall(dir,row,vertical,horizontal)\n        getRecursiveWalls(\n            vertical.slice(0, vertical.indexOf(row)),\n            horizontal,\n        );\n        getRecursiveWalls(\n            vertical.slice(vertical.indexOf(row) + 1),\n            horizontal,\n        );\n    }\n}\n\nconst addWall = (dir,row,vertical,horizontal)=>{\n    let tempWalls = []\n    if(!dir){\n        if(horizontal.length === 2) return\n        for(let temp of horizontal){\n            tempWalls.push({\"row\": temp, \"col\": row});\n        }\n    }else{\n        if(vertical.length === 2) return\n        for(let temp of vertical){\n            tempWalls.push({row, \"col\": temp});\n        }\n    }\n    tempWalls.splice(generateRandomNumber(tempWalls.length),1)\n    for(let wall of tempWalls){\n        walls.push(wall)\n    }\n}\n\nconst RandomNumer = (array) =>{\n    let max = array.length - 1;\n    let randomNum =\n      Math.floor(Math.random() * (max / 2)) +\n      Math.floor(Math.random() * (max / 2));\n    if (randomNum % 2 === 0) {\n      if (randomNum === max) {\n        randomNum -= 1;\n      } else {\n        randomNum += 1;\n      }\n    }\n    return array[randomNum]\n}\n\nfunction generateRandomNumber(max) {\n    let randomNum =\n      Math.floor(Math.random() * (max / 2)) +\n      Math.floor(Math.random() * (max / 2));\n    if (randomNum % 2 !== 0) {\n      if (randomNum === max) {\n        randomNum -= 1;\n      } else {\n        randomNum += 1;\n      }\n    }\n    return randomNum;\n  }\n\nexport default recursiveDivision","const clearPath = _=>{\n    const nodes = document.querySelectorAll(`div[clear=\"true\"]`)\n    nodes.forEach(node=>{\n        node.style.background = \"\"\n        node.classList.remove(\"visited-node\")\n        node.classList.remove(\"path-node\")\n        node.classList.remove(\"clear\")\n    })\n}\n\nexport default clearPath","const animation = (visitedNodes,shortestWay,firstOrTwo)=> new Promise((res)=>{\n        if(!visitedNodes) return\n        visitedNodes.forEach((node,index)=>{\n            if(index === visitedNodes.length -1){\n                setTimeout(async() => {\n                    await createPathAnimation(shortestWay,firstOrTwo)\n                    res(true)\n                }, index/2);\n            }\n            setTimeout(() => {\n                const ele = document.getElementById(`node-${firstOrTwo}-${node.row}-${node.col}`)\n                ele.classList.add(\"visited-node\")\n                ele.setAttribute(\"clear\",\"true\")\n            }, index/2);\n        })\n    }\n)\n\nconst createPathAnimation = (shortestWay,firstOrTwo) =>new Promise((res)=>{\n    shortestWay.forEach((node,index)=>{\n        setTimeout(() => {\n            const ele = document.getElementById(`node-${firstOrTwo}-${node.row}-${node.col}`)\n            if(ele === null) return console.log(node)\n            ele.classList.add(\"path-node\")\n            ele.setAttribute(\"clear\",\"true\")\n            if(index === shortestWay.length - 1) res(true)\n        }, index * 50);\n    })\n})\n\nexport default animation\n","const mazeAnimation = (shortestWay,firstOrSecond,grid) => new Promise((res)=>{\n    shortestWay.forEach((node,index)=>{\n        setTimeout(() => {\n            const ele1 = document.getElementById(`node-${firstOrSecond}-${node.row}-${node.col}`)\n            ele1.style.backgroundColor = \"rgb(0, 255, 213)\"\n            ele1.setAttribute(\"clear\",\"true\")\n            const {row,col} = node\n            grid[row][col].isWall = true\n            if(index === shortestWay.length - 1) res(grid)\n        }, index * 20);\n    })\n})\n\nexport default mazeAnimation","import \"./Config.css\"\nimport {Dijkstran} from \"../../algorithms/dijkstra\"\nimport { useGlobalContext } from \"../../context/context\"\nimport clearPath from \"../help/clearPath\"\nimport animtion from \"../help/animation\"\nimport updateGridWalls from \"../help/updateGridWalls\"\nimport recursiveDivision from \"../../mazeAlgorithms/recursiveDivision\"\nimport mazeAnimation from \"../help/mazeAnimation\"\nimport aStart from \"../../algorithms/aStar\"\n\nexport default function Config() {\n    const {gridOne,gridTwo,setGridOne,setGridTwo,config,setConfig} = useGlobalContext()\n    const {toggleWalls,isVisualizationTwo} = config\n\n    const cap = document.querySelector(\".cap\")\n    const Config= document.querySelector(\".Config\")\n\n\n    const startAlgorithmo = async _=>{\n        Config.classList.remove(\"active\")\n        cap.style.width = \"100%\"\n        const newGridOne = updateGridWalls(gridOne,true)\n        const newGridTwo = updateGridWalls(gridTwo,false)\n\n        const pathOne = Dijkstran(newGridOne);\n        const pathTwo = aStart(newGridTwo);\n\n        const visitedNodesOne = pathOne.visitedNodes;\n        const shortestWayOne = pathOne.shortestWay;\n\n        const visitedNodesTwo = pathTwo.visitedNodes;\n        const shortestWayTwo = pathTwo.shortestWay;\n\n        await Promise.all([animtion(visitedNodesOne,shortestWayOne,\"1\"),\n                     animtion(visitedNodesTwo,shortestWayTwo,\"2\")])\n        setConfig({...config,isPath: true});\n        cap.style.width = \"0%\"\n    }\n\n    const addOrRemoveWalls = _=>{\n        Config.classList.remove(\"active\")\n        setConfig({...config,toggleWalls: !toggleWalls});\n    }\n    const visulizationTwo = _=>{\n        Config.classList.remove(\"active\")\n        setConfig({...config,isVisualizationTwo: !isVisualizationTwo});\n    }\n\n    const clear = _=>{\n        clearPath()\n        setConfig({...config,isPath: false});\n    }\n\n    const clearAll = _=>{\n        clear()\n        const updateGridOne = updateGridWalls(gridOne,true,true)\n        const updateGridTwo = updateGridWalls(gridTwo,false,true)\n        return {updateGridOne,updateGridTwo}\n    }\n\n    const mazeRecursiveDivision = async _=>{\n        Config.classList.remove(\"active\")\n        cap.style.width = \"100%\"\n        \n        const {updateGridOne,updateGridTwo} = clearAll()\n\n        const maze1 = recursiveDivision(updateGridOne)\n        const maze2 = recursiveDivision(updateGridTwo)\n        \n        const newGrid1 = gridOne.slice()\n        const newGrid2 = gridTwo.slice()\n        \n        const res = await Promise.all([mazeAnimation(maze1,1,newGrid1),mazeAnimation(maze2,2,newGrid2)]) \n        \n        setGridOne(res[0])\n        setGridTwo(res[1])\n        cap.style.width = \"0%\"\n\n    }\n    \n    return (\n        <div className=\"Config\">\n            <button className=\"startPath buttonConfig\" onClick={_=>startAlgorithmo()}>Start</button>\n            <button className=\"addOrRemove buttonConfig\" onClick={_=>addOrRemoveWalls()}>{toggleWalls ? \n                <p>remove</p> :\n                <p>add</p>}\n            </button>\n            <button className=\"two buttonConfig\" onClick={_=>visulizationTwo()}>{isVisualizationTwo ? \"One\" : \"Two\"}</button>\n            <button className=\"clearPath buttonConfig\" onClick={_=>clear()}>Clear path</button>\n            <button className=\"clearAll buttonConfig\" onClick={_=>clearAll()}>Clear all</button>\n            <button className=\"maze buttonConfig\" onClick={_=>mazeRecursiveDivision()}>Maze</button>\n        </div>\n    )\n}\n","import React from 'react'\nimport \"./header.css\"\nexport default function Header() {\n    const Config = _=>{\n        const config= document.querySelector(\".Config\")\n        config.classList.toggle(\"active\")\n    }\n    return (\n        <div className=\"header\">\n            <button onClick={_=>Config()}><i className=\"fas fa-bars\"></i></button>\n            <p>\n                Dijkstra Vs A*\n            </p>\n        </div>\n    )\n}\n","import './App.css';\nimport ContainerVisualizations from './components/containerVisualizations/ContainerVisualizations';\nimport Config from \"./components/Setting/Config.js\"\nimport Header from './components/header/Header';\nfunction App() {\n  return (\n    <>\n      <div className=\"containerApp disable-select\" draggable=\"false\">\n        <Header/>\n        <Config/>\n        <ContainerVisualizations/>\n      </div>\n      <div className=\"cap\"></div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {AppProvider} from \"./context/context\"\n\nReactDOM.render(\n  <React.StrictMode>\n      <AppProvider>\n        <App />\n      </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}